@use 'sass:meta';

@mixin generate-utility($utility, $infix) {
  $values: map-get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == 'string' or type-of(nth($values, 1)) != 'list' {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == 'string' {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class: map-get($utility, class);
    $property-class: if($property-class, $property-class, nth($properties, 1));

    // Use focus state if present
    $property-focus: map-get($utility, focus) == true;

    // Use hover state if present
    $property-hover: map-get($utility, hover) == true;

    // Don't prefix if value key is null (eg. with shadow class)
    $property-class-modifier: if($key, '-' + $key, '');

    @if $property-class == no {
      $property-class-modifier: $key;
      $property-class: '';
    }

    @if $property-focus and $infix == '' {
      .focus\:#{$infix + $property-class + $property-class-modifier}:focus {
        @each $property in $properties {
          #{$property}: $value;
        }
      }
    }

    @if $property-hover and $infix == '' {
      @media (hover) {
        .hover\:#{$infix + $property-class + $property-class-modifier}:hover {
          @each $property in $properties {
            @if type-of($value) == 'color' {
              #{$property}: lighten($value, 25%);
            } @else {
              #{$property}: $value;
            }
          }
        }
      }
    }

    .#{$infix + $property-class + $property-class-modifier} {
      @each $property in $properties {
        #{$property}: $value;
      }
    }
  }
}
