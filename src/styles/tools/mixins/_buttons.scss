@use '../mixins/typography' as _typography;
@use '../../settings/variables' as _variables;
@use 'properties' as _properties;
@use 'sass:map';

// Buttons............Mixin to add button styles.

// button styles map configuration
$buttons: (
  primary: (
    default: (
      background-color: var(--color-secondary),
      color: var(--color-foreground),
      border-color: var(--color-secondary)
    ),
    hover: (
      background-color: lighten(_variables.$core-color-secondary, 25%),
      border-color: lighten(_variables.$core-color-secondary, 25%)
    )
  ),
  secondary: (
    default: (
      background-color: var(--color-primary),
      color: var(--color-background),
      border-color: var(--color-primary)
    ),
    hover: (
      background-color: var(--color-foreground),
      color: var(--color-background)
    )
  ),
  disabled: (
    default: (
      background-color: var(--color-neutral),
      color: var(--color-heading),
      border-color: var(--color-neutral),
      cursor: not-allowed
    ),
  ),
);

@mixin button($style) {
  $props: map.get($buttons, $style);
  $default: map.get($props, default);
  $hover: map.get($props, hover);

  @if $props == null {
    @warn 'button style \"#{$style}\" not found';
  } @else {
    @include _properties.map-to-props($default);
    @include _typography.text(xs);
    padding: _variables.$core-grid (_variables.$core-grid * 3);
    border-radius: 5px;
    border-width: _variables.$core-border-width;
    border-style: _variables.$core-border-style;
    font-variation-settings: 'wght' _variables.$core-secondary-font-weight;
    text-transform: uppercase;
    letter-spacing: 1px;

    @if map.has-key($props, hover) {
      &:active,
      &:focus {
        @include _properties.map-to-props($hover);
      }

      @media (hover) {
        &:hover {
          @include _properties.map-to-props($hover);
        }
      }
    }
  }
}
